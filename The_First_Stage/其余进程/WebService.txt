
@RestController
public class BwmsInwmsXService {

  @Autowired
  private ServiceProxy   serviceProxy;
  @Autowired
  private InwmsXController controller;

  @RequestMapping(path = InwmsXDesc.SERVICE + "/" + InwmsXDesc.SAMPLE_EP, method = RequestMethod.POST)
  public ResponseEntity<ServiceOutput<SampleOutput>> service(@RequestBody ServiceInput<SampleInput> input, @RequestHeader HttpHeaders headers) {
    ServiceOutput<SampleOutput> output = new ServiceOutput<>();
    HttpStatus status = serviceProxy.callService(input, output, headers, controller, InwmsXDesc.SAMPLE_EP, InwmsXDesc.getIt());
    return new ResponseEntity<ServiceOutput<SampleOutput>>(output, status);
  }

}

一个service中包含了多个fanc
对于该service，应有一个controler作为定义service中func的input和接口和实现

所以每一个service中的方法都有自己的输入和输出方法

该项目利用一个CoreController来实现了对所有ServiceController的复用

 */
public interface InwmsXController extends CoreController{
  
  public CoreOutput doSomething(SampleInput input);
}


@Component
public class InwmsXControllerImpl implements InwmsXController {

  /**
   * Default constructor.
   */
  public InwmsXControllerImpl() {
  }

  /**
   * Core of a controller, entry point for logical implementation. Sample with definition of return value.
   */
  @Override
  public CoreOutput executeService(String function, CoreInput input) {
    switch (function) {
    case InwmsXDesc.SAMPLE_EP:
      if (!(input instanceof SampleInput)) {
        String service = InwmsXDesc.getIt().getService();
        throw new BendException(BendCoreTextCodes.BEND_0003, service, InwmsXDesc.SAMPLE_EP, input.getClass().getName());
      }
      return doSomething((SampleInput) input);
    default:
      String service = InwmsXDesc.getIt().getService();
      throw new BendException(BendCoreTextCodes.BEND_0004, function, service);
    }
  }

  @Override
  public SampleOutput doSomething(SampleInput input) {
    // Implementation of logic
    return new SampleOutput();
  }

}



Service的构建过程
1.Write an input class
作用：传递用户请求的信息：比如点击一个按钮，出发一次数据库的访问
2.Write an output class
作用：传递数据到前端
3. Describe the webservice in the description class
defines which endpoints and services in Webservice.
and maps the different Webservices to Input and Output classes.
在ServiceDesc中
4.COntroller interface and impl
5.写webservice
@RestController来标注
@Autoweird ServicePoxy
@Autoweird 前面对应的controller（接口）

关于方法
 @RequestMapping(path = <group name> + "/" + <service name>, method = RequestMethod.POST)
signature: public ResponseEntity<ServiceOutput<CoreOutput>> exampleMethodName(@RequestBody ServiceInput<ExampleInputClass> input)
calling the callService method from the ServiceProxy


Call a webservice

public void setButSynchronize(IUnitOfWork uow, Vector<CgTab> selVec) {
  CodegenSyncTabInput input = new CodegenSyncTabInput();
  input.setEleList(new ArrayList<CodegenSyncElement>());
  CodegenSyncElement ele;
  String component = uow.getComponentName();
  input.setComponent(component);
  for (CgTab sel : selVec) {
    ele = new CodegenSyncElement();
    ele.setKnzGenRel(getKnzGenRel());
    ele.setTableName(sel.getTableName());
    input.getEleList().add(ele);
  }
  CallService.getIt().callService(input, CodegenDesc.CODEGEN_SYNC_TAB_ENTRY, CodegenDesc.getIt()); // <--- This is the actual call
}



概念梳理
WS是一个一次RESTcall Service with JSON as transferred data


service construction:
1.一个XXXService包含多个func
2.该Service的Controller，包含一个interface和一个implementation
3.Controller中包含了所有的service方法 
MyExampleOutputN exampleN(MyExampleInputN input)-每一个service的func都有他们自己的Output和Input clases
4.此外服务的入口点是“/family/fundc”---这里就类似于task1中的inventory/isLuCoded
这个信息一般在familyDesc中定义、、、、
比如：
public class InventoryDesc extends ServiceDesc {

 
  public static final String         CHECK_LU_CODED_EP    = "isLuCoded";
 

  private static final InventoryDesc SINGLETON            = new InventoryDesc();

  private InventoryDesc() {
    super(SERVICE);
    putEle(CHECK_LU_CODED_EP, InventoryLuCodedInput.class, InventoryLuCodedOutput.class);
    --这里存储的是不同webservice对应的input和output
    /*
    protected void putEle(String key, Class<?> inputClass, Class<?> outputClass) {
    this.eleMap.put(key, new ServiceDescEle(inputClass, outputClass));
     }
    */
    
  }

  public static InventoryDesc getIt() {
    return SINGLETON;
  }

此外还有一些service helper用于处理有关实现或者异常处理的任务

相关API包的内容：
一个该component的desc和若干对input和output classes


实施框架
ServiceDesc - a basic for the service descriptions
CoreInput/CoreOutput - a basic for the service-input and output
ServiceInput/Output（这二者都是继承至上一栏） - the container for CoreInput/Output, which contains in addition the general stuff (user, secret, times, language, context, error-stuff)
EmptyInput/Output - for services with no input or void-output


设计一个webservice的步骤
1.写好input和output classes
2.编写desc class或者在现有的desc中注册input和output
3.写好controller interface
funcoutput FunN(funInput input)
4.controller impl implement controllerInterface
例子在InventoryControllerImpl
public CoreOutput executeService(String function(service名比如InventoryDESC下的isluCoded), CoreInput input) 
switch (function) {
   case CodegenDesc.Desc中定义的不同service的代码:
     if (!(input instanceof CodegenSyncTabInput)) {
       String service = CodegenDesc.getIt().getService();
       String[] stringAr = { service, CodegenDesc.CODEGEN_SYNC_TAB_ENTRY, input.getClass().getName() };
       throw new BendException("BEND-0003", stringAr);
     }
     return doSynchronizeWork((CodegenSyncTabInput) input);
 
   default:
     String service = CodegenDesc.getIt().getService();
     String[] stringAr = { service, CodegenDesc.CODEGEN_SYNC_TAB_ENTRY, input.getClass().getName() };
     throw new BendException("BEND-0003", stringAr);
   }

5.最上一层
写好Service
作用是将endpoint（前端）传来的请求map至相应的webservice中








