package com.inconso.bend.inwmsx.it.slaasgmt;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;
import com.inconso.bend.inwmsx.it.general.GeneralHelper;
import com.inconso.bend.slaasgmt.pers.gen.SlaaSingleArticleConfigPk;
import com.inconso.bend.slaasgmt.pers.gen.SlaaSlArtAsgmtPk;
import com.inconso.bend.slaasgmt.pers.model.SlaaSingleArticleConfig;
import com.inconso.bend.slaasgmt.pers.model.SlaaSlArtAsgmt;
import com.inconso.bend.slaasgmt.pers.rep.SlaaSingleArticleConfigRep;
import com.inconso.bend.slaasgmt.pers.rep.SlaaSlArtAsgmtRep;
import io.cucumber.java.en.Given;

public class SlaaDefaultDataChecker {

  @Autowired
  private GeneralHelper              generalHelper;

  @Autowired
  private SlaaSlArtAsgmtRep          slaaSlArtAsgmtRep;

  @Autowired
  private SlaaSingleArticleConfigRep singleArticleConfigRep;

  private SlaaSlArtAsgmt             slAartAsgmt;

  private SlaaSingleArticleConfig    singleArticleConfig;

  /**
   * Verify that the record in SLAA100 has been created
   * 
   * @param storageAreaTgt
   * 
   * @param storageLocationTgt
   * 
   * @param client
   * 
   * @param article
   * 
   * @param flgFixedLocation
   * 
   */
  @Given("A record in SLAA100 for location {string}-{string}, {string}, {string} has been created")
  @Transactional(readOnly = true)
  public void verifyRecordForLocation(String storageAreaTgt, String storageLocationTgt, String article, String flgFixedLocation) {
    if (storageAreaTgt != null && storageLocationTgt != null) {
      slAartAsgmt = readRecord(storageAreaTgt, storageLocationTgt, article, flgFixedLocation);
      assertNotNull(slAartAsgmt);
    }
  }

  /**
   * Verify that the record in SLAA100 has been removed
   * 
   * @param storageAreaTgt
   * 
   * @param storageLocationTgt
   * 
   * @param article
   * 
   * @param flgFixedLocation
   * 
   */
  @Given("A record in SLAA100 for location {string}-{string}, {string}, {string} with only single article has been removed")
  @Transactional(readOnly = true)
  public void verifyRecordForLocationRemoved(String storageAreaTgt, String storageLocationTgt, String article, String flgFixedLocation) {
    if (storageAreaTgt != null && storageLocationTgt != null) {
      slAartAsgmt = readRecord(storageAreaTgt, storageLocationTgt, article, flgFixedLocation);
      assertNull(slAartAsgmt);
    }
  }

  /**
   * Verify that the flgFixedLocation is not flagged
   * 
   */
  @Given("in this record the fixed location is not flagged")
  public void verifyFlgFixedLocationIsNotFlagged() {
    assertEquals("0", slAartAsgmt.getFlgFixedLocation());
  }

  /**
   * Verify that the flgInitial is not flagged
   * 
   */
  @Given("initial is not flagged")
  @Transactional(readOnly = true)
  public void verifyFlgInitialIsNotFlagged() {
    assertEquals("0", slAartAsgmt.getFlgInitial());
  }

  /**
   * Verify that the stock criteria are filled according to SLAA010
   * 
   */
  @Given("the stock criteria are filled according to SLAA010")
  @Transactional(readOnly = true)
  public void verifyStockCriteriaFilled() {
    singleArticleConfig = readLocationTyp("RK1", slAartAsgmt.getTopStorageLocation().getTypStorageLocation());

    assertNotNull(singleArticleConfig);
  }

  /**
   * Ensure that the record is read from database if it's necessary.
   * 
   */
  private SlaaSlArtAsgmt readRecord(String storageAreaTgt, String storageLocationTgt, String article, String flgFixedLocation) {
    return (slAartAsgmt == null) ? slaaSlArtAsgmtRep.findBySlaaSlArtAsgmtPkAndFlgFixedLocation(
        new SlaaSlArtAsgmtPk(generalHelper.getIdSite(), storageAreaTgt, storageLocationTgt, generalHelper.getIdClient(), article), flgFixedLocation)
        : slAartAsgmt;
  }

  /**
   * Ensure that the record is read from database if it's necessary.
   * 
   */
  private SlaaSingleArticleConfig readLocationTyp(String client, String typLocation) {
    return (singleArticleConfig == null)
        ? singleArticleConfigRep.findOne(new SlaaSingleArticleConfigPk(generalHelper.getIdSite(), client, typLocation))
        : singleArticleConfig;
  }
}
